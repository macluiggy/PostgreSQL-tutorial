CREATE TABLE contacts(
    id INT GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(15),
    PRIMARY KEY (id)
);

insert into contacts (first_name, last_name, email, phone) values ('luiggy', 'macias', null, '');-- no funciona porque se especifica que no puede ser null
insert into contacts (first_name, last_name, email, phone) values ('luiggy', 'macias', 'null', null);-- este funciona ya que no se especifica que no pueda ser null
insert into contacts (first_name, last_name, email, phone) values ('luiggy', 'macias', 'null', '0985518903');

CREATE TABLE contacts2(
    id SERIAL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(15),
    PRIMARY KEY (id)
);
insert into contacts2 (first_name, last_name, email, phone) values ('luiggy', 'macias', 'email@gmail.com', null);-- este funciona ya que no se especifica que no pueda ser null
insert into contacts (first_name, last_name, email, phone) values ('luiggy', 'macias', 'email@gmail.com', null);-- este funciona ya que no se especifica que no pueda ser null

--para encontrar el contacto que no tiene numero de telefono
select first_name, last_name, email, phone from contacts where phone = null; -- ya que el valor es null y no se puede hace comparaciones con null (null = null), esto se toma se toma como false
select first_name, last_name, email, phone from contacts where phone is null; -- el operador is si puede devolver false o true

-- para al contrario encontrar los que si tienen numero de telefono
select first_name, last_name, email, phone from contacts where phone is not null; -- el operador is not si puede devolver false o true
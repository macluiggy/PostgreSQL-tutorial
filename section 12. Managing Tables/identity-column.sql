-- la sintaxis es:
column_name type GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY[ ( sequence_option ) ]
/*
- type es el tipo de dato de la columna pueder ser SMALLINT, INTEGER, BIGINT
- GENERATED ALWAYS AS IDENTITY le dice a postgres que siempre creé un valor para la columna identidad
si intentas insertar o actualizar la columna identidad, se genera un error, ya que postgres
le agrega un valor automáticamente
- GENERATED BY DEFAULT tambien le dice a postgres que siempre creé un valor para
la columna identidad, pero no se genera un error si intentas insertar o actualizar
ya que si intentas insertar/actualizar se toma ese valor en lugar del valor por defecto
*/

-- postgresql te permite usar mas de una columna identidad
-- al igual que SERIAL la columna identidad usa el objeto SECUENCIA internamente

-- A) GENERATED ALWAYS example
CREATE TABLE color (
    color_id INT GENERATED ALWAYS AS IDENTITY,
    color_name VARCHAR NOT NULL
);

INSERT INTO color(color_name)
VALUES ('Red');

SELECT * FROM color;

-- si intentamos insertar un valor para la columna identidad color_id
-- postgres mandara errrorr
INSERT INTO color (color_id, color_name)
VALUES (2, 'Green');

-- este te mandara una sugerencia, si usamos esa sugerencia podremos insertar un valor
INSERT INTO color (color_id, color_name)
OVERRIDING SYSTEM VALUE -- la sugerencia
VALUES(2, 'Green');
-- o podemos usar GENERATED BY DEFAULT AS IDENTITY

-- B) GENERATED BY DEFAULT AS IDENTITY example
-- para poder usar una tabla con el mismo nombre, primero eliminamos la tabla
DROP TABLE color;

CREATE TABLE color (
    color_id INT GENERATED BY DEFAULT AS IDENTITY,
    color_name VARCHAR NOT NULL
);

INSERT INTO color (color_name)
VALUES ('White');

INSERT INTO color (color_id, color_name)
VALUES (2, 'Yellow');

-- C) Sequence options example
-- ya que GENERATED AS IDENTITY usa el objeto SECUENCIA, se pueden usar
-- sus opciones al final entre parentesis
CREATE TABLE color (
    color_id INT GENERATED BY DEFAULT AS IDENTITY
    (START WITH 10, INCREMENT BY 10),
    color_name VARCHAR NOT NULL
);

INSERT INTO color (color_name)
VALUES ('Orange');

SELECT * FROM color;

INSERT INTO color (color_name)
VALUES ('Purple');

SELECT * FROM color;

-- Adding an identity column to an existing table
-- se puede añadir una columna identidad a una tabla existente usando 
-- la siguiente forma de la declaracion ALTER TABLE
ALTER TABLE table_name 
ALTER COLUMN column_name 
ADD GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY { ( sequence_option ) }

-- vamos a ver el siguiente ejemplo
-- primero creamos una tabla
CREATE TABLE shape (
    shape_id INT NOT NULL,
    shape_name VARCHAR NOT NULL
);

-- luego cambiamos la columna shape_id a la columna identidad
ALTER TABLE shape
ALTER COLUMN shape_id GENERATED ALWAYS AS IDENTITY;
-- NOTE que shape_id tiene que tener el constraint NOT NULL para poder
-- ser alterada a la columna identidad
-- si no postgres mandara el siguiente error
ERROR:  column "shape_id" of relation "shape" must be declared NOT NULL before identity can be added
SQL state: 55000
-- el siguiente comando describe la table shape en la herammiente psql tool:
\d shape

-- puedes cambiar las caracteristicas de una columna identidad existente usando
-- la siguiente declaracion ALTER TABLE:
ALTER TABLE table_name 
ALTER COLUMN column_name 
{ SET GENERATED { ALWAYS| BY DEFAULT } | 
  SET sequence_option | RESTART [ [ WITH ] restart ] }

-- por ejemplo, la siguiente declaracion cambia la columna shape_id
-- a GENERATED BY DEFAULT
ALTER TABLE shape
ALTER COLUMN shape_id
SET GENERATED BY DEFAULT;

-- Removing the GENERATED AS IDENTITY constraint
-- la siguiente declaracion borra GENERATED AS IDENTITY de una tabla existente
ALTER TABLE table_name 
ALTER COLUMN column_name 
DROP IDENTITY [ IF EXISTS ] 

-- por ejemplo, puedes remover GENERATED AS IDENTITY de la columna shape_id de la tabla shape
ALTER TABLE shape
ALTER COLUMN shape_id
DROP IDENTITY IF EXISTS;
